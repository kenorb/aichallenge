<?xml version="1.0" encoding="utf-8"?>
<project name="Rhino Visualizer" basedir="." default="help">

  <target name="load-properties">
    <!-- Allow user to override default settings from build.properties -->
    <property file="local.properties" />
    <property file="default.properties" />
  </target>

  <target name="check-rhino">
    <condition property="rhino.available">
      <available file="3rdparty/mozilla" />
    </condition>
  </target>

  <target name="download-rhino" unless="rhino.available" depends="check-rhino">
    <cvs cvsroot=":pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot" package="mozilla/js/rhino/src" dest="3rdparty" date="${rhino.date}" failonerror="yes" />
  </target>

  <target name="compile-rhino" depends="load-properties,download-rhino">
    <mkdir dir="${build.java}" />
    <javac destdir="${build.java}" debug="${java.debug}" target="${java.target}" includeAntRuntime="false">
      <src path="3rdparty/mozilla/js/rhino/src" />
      <include name="**"/>
      <exclude name="org/mozilla/javascript/JavaAdapter.java"/>
    </javac>
    <copy file="3rdparty/mozilla/js/rhino/src/org/mozilla/javascript/resources/Messages.properties"
        tofile="${build.java}/org/mozilla/javascript/resources/Messages.properties"/>
  </target>

  <target name="compile-visualizer" depends="compile-rhino">
    <javac destdir="${build.java}" debug="${java.debug}" target="${java.target}" includeAntRuntime="false" srcdir="${src.java}" classpath="${java.plugin}" />
  </target>

  <target name="compile-js" depends="compile-visualizer">
    <java classname="com.aicontest.visualizer.Compile" classpath="${build.java}" dir="${build.java}" taskname="rhino" fork="yes" failonerror="true">
      <jvmarg value="-Xmx100m" />
      <arg value="${basedir}" />
      <arg value="${src.js}" />
    </java>
  </target>
  
  <!-- JAR generation -->
  
  <target name="check-jaropt">
    <condition property="jaropt.available">
      <available file="3rdparty/cmc/jaropt.jar" />
    </condition>
  </target>

  <target name="download-jaropt" unless="jaropt.available" depends="check-jaropt">
    <mkdir dir="3rdparty/cmc" />
    <get src="http://www.fightingquaker.com/jaropt/jaropt.jar" dest="3rdparty/cmc/jaropt.jar" usetimestamp="true" />
  </target>


  <target name="check-jar" depends="load-properties">
    <uptodate property="jar.uptodate" targetfile="${jar.file}">
      <srcfiles dir="${build.java}" />
      <srcfiles dir="${src.data}/img" />
    </uptodate>
  </target>

  <target name="jar" depends="compile-rhino,compile-visualizer,compile-js,download-jaropt,check-jar" unless="jar.uptodate" description="creates the visualizer jar file for use as an applet and as an offline viewer">
    <mkdir dir="${build.deploy}"/>
    <jar jarfile="${jar.file}" update="no" compress="${jar.compression}" level="9" manifest="${src.java}/MANIFEST.MF">
      <fileset dir="${src.data}">
        <include name="img/**" />
      </fileset>
      <fileset dir="${build.java}">
        <include name="**"/>
        <exclude name="org/mozilla/classfile/**"/>
        <exclude name="org/mozilla/javascript/annotations/**"/>
      </fileset>
    </jar>
    <taskdef name="JarOpt" 
             classname="org.cmc.jaroptimizer.JarOptTask" 
             classpath="${java.home}/lib/plugin.jar;3rdparty/cmc/jaropt.jar"/>
    <JarOpt src="${jar.file}" dst="${build.deploy}/min.jar" examinedynamicdependencies="false">
      <includePattern>com.aicontest.visualizer.Main</includePattern>
      <includePattern>com.aicontest.visualizer.VisualizerApplet</includePattern>
      <includePattern>org.mozilla.javascript.gen.*</includePattern>
      <includePattern>org.mozilla.javascript.jdk15.VMBridge_jdk15</includePattern>
      <includePattern>org.mozilla.javascript.regexp.RegExpImpl</includePattern>
    </JarOpt>
    <move file="${build.deploy}/min.jar" tofile="${jar.file}"/>
  </target>
  
  <!-- HTML visualizer -->
  
  <target name="html-visualizer" depends="load-properties" description="create a zip archive of the offline html visualizer files">
    <zip destfile="${html.zip}">
      <fileset dir="." includes="copy_paste.html,replay.html.template,__init__.py,visualize_locally.py,${src.js}/**,${src.data}/**"/>
    </zip>
  </target>
  
  <!-- JavaScript transormation -->

  <target name="check-closurecompiler">
    <condition property="closurecompiler.available">
      <available file="3rdparty/google/compiler.jar" />
    </condition>
    <uptodate property="closurecompiler.skip" targetfile="${build.js}/visualizer-min.js">
      <srcfiles dir="${src.js}" includes="**/*.js" />
    </uptodate>
  </target>

  <target name="download-closurecompiler" unless="closurecompiler.available" depends="check-closurecompiler">
    <mkdir dir="downloads" />
    <get src="http://closure-compiler.googlecode.com/files/compiler-latest.zip" dest="downloads/compiler-latest.zip" usetimestamp="true" />
    <unzip src="downloads/compiler-latest.zip" dest="3rdparty/google" />
  </target>

  <target name="minify-js" depends="load-properties,download-closurecompiler" unless="closurecompiler.skip">
    <mkdir dir="${build.js}"/>
    <delete>
      <fileset dir="${build.js}">
        <include name="**/*.js" />
        <exclude name="visualizer-min.js" />
      </fileset>
    </delete>
    <loadfile property="js.files" srcfile="${src.js}/visualizer.js">
      <filterchain>
        <containsregex byline="on" pattern="^\$import" />
        <replaceregex pattern="\$import\('" replace="--js ${src.js}/" />
        <replaceregex pattern="'\)\;\s+" flags="g" byline="false" replace=".js " />
      </filterchain>
    </loadfile>
    <mkdir dir="${build.js}" />
    <condition property="js.pretty.arg" value="--formatting PRETTY_PRINT" else="">
      <istrue value="${js.pretty}"/>
    </condition>
    <java jar="3rdparty/google/compiler.jar" fork="true" failonerror="yes">
      <jvmarg value="-Xmx100m" />
      <arg line="--compilation_level ADVANCED_OPTIMIZATIONS ${js.pretty.arg} --jscomp_off nonStandardJsDocs --js_output_file ${build.js}/visualizer-min.tmp ${js.files}" />
    </java>
    <move file="${build.js}/visualizer-min.tmp" toFile="${build.js}/visualizer-min.js"/>
  </target>

  <target name="minify-js-condition" depends="load-properties">
    <condition property="js.minify.set">
      <istrue value="${js.minify}"/>
    </condition>
  </target>

  <target name="minify-js-conditional" depends="minify-js-condition" if="js.minify.set">
    <antcall target="minify-js" />
  </target>
  
  <target name="copy-js-conditional" depends="minify-js-condition" unless="js.minify.set">
    <sync todir="${build.js}">
      <fileset dir="${src.js}" />
    </sync>
  </target>
  
  <target name="minify-or-copy-js" depends="minify-js-conditional,copy-js-conditional" description="minify or copy JavaScript files to the build directory depending on the value of js.minify"/>
  
  <!-- deployment -->
  
  <target name="check-deploy" depends="load-properties" unless="deploy.path">
    <fail message="Please define 'deploy.path' in local.properties as the web root." />
  </target>
  
  <target name="deploy" depends="check-deploy,jar,minify-or-copy-js" description="compile and deploy to the path that is set in 'deploy.path'">
    <sync todir="${build.deploy}/img">
      <fileset dir="${src.data}/img" />
    </sync>
    <sync todir="${deploy.path}/visualizer">
      <fileset dir="${build.deploy}" />
    </sync>
  </target>
  
  <!-- other -->

  <target name="run-visualizer" depends="compile-visualizer,compile-js" description="runs the visualizer with a sample replay">
    <java classname="com.aicontest.visualizer.Main" classpath="${build.java}:${src.data}" dir="${build.java}" fork="yes" failonerror="yes">
      <arg value="${basedir}/games/0/1.replay" />
    </java>
  </target>

  <target name="all" depends="jar,minify-or-copy-js" />

  <target name="clean" depends="load-properties" description="deletes the 'build' directory">
    <delete quiet="true" dir="${build}" />
  </target>

  <target name="deepclean" depends="clean" description="clean + removes all generated or downloaded files">
    <delete quiet="true" dir="3rdparty" />
    <delete quiet="true" dir="downloads" />
  </target>
  
  <target name="help">
    <echo>Type 'ant -p' to list available targets!</echo>
  </target>

</project>
