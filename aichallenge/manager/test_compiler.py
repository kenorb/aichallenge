# Mocks the functionality of some compile_anything functions
# in order to test it.
# Author: Benjamin S Wolf (jokeserver@gmail.com)

import compile_anything
import os
import shutil
import tempfile
from functools import partial

BOT = compile_anything.BOT

class Log:
    def __init__(self):
        self.out = ""
        self.err = ""
Log.clear = Log.__init__

log = Log()
# cause the Log() creation to actually return our Log instance
compile_anything.Log = lambda: log

# taken from the schema/sampledb, maybe slightly modified
languages = [
        ( 1, "Java", BOT + ".java", "java -jar %s.jar" % BOT),
        ( 3, "C++", BOT + ".cc", "./" + BOT),
        ( 4, "C", BOT + ".c", "./" + BOT),
        ( 6, "Python", BOT + ".py", "python %s.py" % BOT),
        ( 7, "C#", BOT + ".cs", "mono %s.exe" % BOT),
        ( 8, "Haskell", BOT + ".hs", "./" + BOT),
        # These are made up. The only things necessary are items 2 and 3.
        ( 9, "Clojure", BOT + ".clj", ""),
        (10, "CoffeeScript", BOT + ".coffee", ""),
        (11, "Go", BOT + ".go", ""),
        (12, "Javascript", BOT + ".js", ""),
        (13, "Lisp", BOT + ".lisp", ""),
        (14, "Lua", BOT + ".lua", ""),
        (15, "OCaml", BOT + ".ml", ""),
        (16, "Perl", BOT + ".pl", ""),
        (17, "PHP", BOT + ".php", ""),
        (18, "Ruby", BOT + ".rb", ""),
        (19, "Scheme", BOT + ".ss", ""),
    ]

languages_dict = [{ "language_id": a,
                    "name" : b,
                    "main_code_file" : c,
                    "command" : d } for (a,b,c,d) in languages]

compile_anything.get_programming_languages = lambda: languages_dict

# for each test case, put mockglob["*.py"] = ["MyBot.py", "aux1.py"], etc.
mockglob = dict()

def safeglob(pattern):
    if pattern in mockglob:
        return mockglob[pattern]
    return []
true_safeglob = compile_anything.safeglob
true_javasafeglob = compile_anything.JavaCompiler.safeglob

def nukeglob(pattern):
    if pattern in mockglob:
        log.out += "Nuking: " + ", ".join(mockglob[pattern]) + ".\n"
true_nukeglob = compile_anything.nukeglob
true_javanukeglob = compile_anything.JavaCompiler.nukeglob

def ospathexists(file):
    return file in mockglob
true_ospathexists = os.path.exists

def system(args, log):
    cmd = " ".join(args)
    log.out += cmd + "\n"
    return True
true_system = compile_anything.system

def make_mock_glob(filelist):
    """ Returns a mock glob dictionary that contains pseudo-globs that will
        match the given files.
        Example: With files "MyBot.py", "aux1.py", "aux1.pyc", and "MyBot",
                 results in: { "*.py"     : ["MyBot.py", "aux1.py"],
                               "*.pyc"    : ["aux1.pyc"],
                               "MyBot"    : ["MyBot"],
                               "MyBot.py" : ["MyBot.py"],
                               "aux1.py"  : ["aux1.py"],
                               "aux1.pyc" : ["aux1.pyc"] } """
    for f in filelist:
        mockglob[f] = [f]
        i = f.rfind('.')
        if i >= 0:
            ext = '*' + f[i:]
            if ext not in mockglob:
                mockglob[ext] = []
            mockglob[ext] += [f]
    return mockglob

def run_test_case(filelist, dry_run=False):
    """ Given a list of files, attempt to compile them. Returns True if
        successful, False otherwise. The log contains the output and error
        data.
        If dry_run is set to True, does not actually perform the compilation,
        by mocking out the functions that would do so. In fact, nothing is
        done with the files, so the files do not have to exist. However,
        the dry_run is likely to return True in all cases, so a visual
        inspection of the output (or testing for equality outside this
        function) will be required.
        For dry runs, be sure to include any files generated by compilation
        in the file list as otherwise it will appear to fail. """
    if dry_run:
        compile_anything.safeglob = safeglob
        compile_anything.nukeglob = nukeglob
        compile_anything.JavaCompiler.safeglob = staticmethod(safeglob)
        compile_anything.JavaCompiler.nukeglob = staticmethod(nukeglob)
        compile_anything.system = system
        os.path.exists = ospathexists
        mockglob.update(make_mock_glob(filelist))
    else:
        cwd = os.getcwd()
        testdir = tempfile.mkdtemp()
        for f in filelist:
            # allow full listing of filenames
            if os.path.exists(f):
                print "cp", f, testdir + "/" + f
                shutil.copy(f, testdir + "/" + f)
        print "cd", testdir
        os.chdir(testdir)

    ret = compile_anything.compile_anything()

    # cleanup
    if dry_run:
        compile_anything.safeglob = true_safeglob
        compile_anything.nukeglob = true_nukeglob
        compile_anything.JavaCompiler.safeglob = true_javasafeglob
        compile_anything.JavaCompiler.nukeglob = true_javanukeglob
        compile_anything.system = true_system
        os.path.exists = true_ospathexists
        mockglob.clear()
    else:
        print "cd", cwd
        os.chdir(cwd)
        print "rm -rf", testdir
        shutil.rmtree(testdir)
    return ret

test_cases = [
        ([BOT + ".c", "aux1.c", BOT + ".o", "aux1.o", BOT], True),
        ([BOT + ".cs", BOT + ".exe"], True),
        ([BOT + ".cc", "PlanetWars.cc", "PlanetWars.h", "PlanetWars.o",
            BOT + ".o", BOT], True),
        ([BOT + ".clj"], True),
        ([BOT + ".coffee"], True),
        ([BOT + ".go", "_go_.6", BOT], True),
        ([BOT + ".hs", BOT], True),
        ([BOT + ".java", "PlanetWars.java", BOT + ".class",
            "PlanetWars.class", "PlanetWars$Planet.class",
            "PlanetWars$Fleet.class", BOT + ".jar"], True),
        ([BOT + ".java", "pkg/PlanetLib.java", "PlanetWars.java",
            BOT + ".class", "pkg/PlanetLib.class",
            "PlanetWars.class", "PlanetWars$Planet.class",
            "PlanetWars$Fleet.class", BOT + ".jar"], True),
        ([BOT + ".js"], True),
        ([BOT + ".lisp", BOT + ".sbcl", BOT], True),
        ([BOT + ".lua"], True),
        ([BOT + ".ml", BOT + ".native"], True),
        ([BOT + ".pl"], True),
        ([BOT + ".php"], True),
        ([BOT + ".py", BOT + ".pyc"], True),
        ([BOT + ".rb"], True),
        ([BOT + ".ss"], True),
        # You actually need to have a working c++ implementation for
        # the test case below
        #([BOT + ".cc", "PlanetWars.cc", "PlanetWars.h"], False)
    ]

def main():
    for filelist, dry_run in test_cases:
        log.clear()
        ret = run_test_case(filelist, dry_run)
        #print "Out"
        #print log.out
        #print "Err"
        #print log.err
        if ret:
            print "Success!"
        else:
            print "Failure."
            print log.err

if __name__ == "__main__":
    main()
